#!/usr/bin/perl
use lib "/usr/local/lib/configuration-generator";

use strict;
use warnings;
use utf8;
use ConfGenCommon;

use Net::Ping;
my $ping = Net::Ping->new( "icmp", 0.01, 64 );

#do '/etc/configuration-generator/bind.conf'     ; our ($config);
#do '/etc/configuration-generator/dhcp.conf'     ; our ($config);
#do '/etc/configuration-generator/shorewall.conf'; our ($hosts_config, $ranges_config);
#do '/etc/configuration-generator/squid.conf'    ; our ($config);

do '/etc/configuration-generator/hosts.conf'; our ($hosts, $ranges, $network);
do '/etc/configuration-generator/util.conf';  our ($config);

sub host_name_from_ip_from_conf
{
  my $ip = $_[0];
  for my $host_name (sort keys %{$hosts})
  {
    return $host_name if (exists($hosts->{$host_name}{'ip'}) and $hosts->{$host_name}{'ip'} eq $ip);
  }
  return $ip;
}

sub all_host_names_from_conf
{
  my $host_name = $_[0];
  return join(', ', $host_name, @{$hosts->{$host_name}{'cnames'}});
}

sub show_hosts_status
{
  my $status = $_[0];
  my @count = (0,0);
  for my $host_name (sort keys %{$hosts})
  {
    my $ping_status = $ping->ping($hosts->{$host_name}{'ip'});
    my $status_string = $ping_status == 1 ? 'online' : 'offline';
    $count[$ping_status]++;
    printf("Host %s (%s) is %s\n", 
                  $host_name, 
                  $hosts->{$host_name}{'ip'}, 
                  $status_string) 
           if($status eq $status_string or $status eq 'status');
  }
  print "---------------------------\n";
  printf("Online: %s\nOffline: %s\nTotal: %s\n", $count[1], $count[0], $count[1] + $count[0])
}

sub show_hosts_names
{
  for my $host_name (sort keys %{$hosts})
  {
    printf("ip: %s, name: %s, cnames: %s\n", 
                  $hosts->{$host_name}{'ip'},
                  $host_name, 
                  join(', ', @{$hosts->{$host_name}{'cnames'}}));
  }
}

sub show_range_status
{
  my ($range_name, $status) = @_[0..1];
  my @count = (0,0);
  for my $range (@{$ranges->{$range_name}})
  {
    my ($addr_from, $addr_to) = @{$range};
    for my $ip (@{range_to_ip_list($addr_from, $addr_to)})
    {
      my $ping_status = $ping->ping($ip);
      my $status_string = $ping_status == 1 ? 'online' : 'offline';
      $count[$ping_status]++;
      printf("Host %s (%s) is %s\n", 
                    host_name_from_ip_from_conf($ip), 
                    $ip, 
                    $status_string) 
             if ($status eq $status_string or $status eq 'status');
    }
  }
  print "---------------------------\n";
  printf("Online: %s\nOffline: %s\nTotal: %s\n", $count[1], $count[0], $count[1] + $count[0])
}

sub show_range_mac
{
  my ($range_name) = $_[0];
  for my $range (@{$ranges->{$range_name}})
  {
    for my $ip (@{range_to_ip_list(@{$range})})
    {
      my $host_name = host_name_from_ip_from_conf($ip);
      my $ping_status = $ping->ping($ip);
      my $cmd = sprintf("arp -e -n %s | tail -n1 | awk '{ print \$3; }'", $ip);
      my $arp_mac = $ping_status == 1 ? `$cmd` : 'unknown, host offline';
      my $conf_mac = exists($hosts->{$host_name}{'mac'}) ? $hosts->{$host_name}{'mac'} : 'not configured';
      chomp $arp_mac if ($ping_status == 1);
      printf("Host %s (%s). Mined mac: %s. Configurated mac: %s\n", 
                    $host_name, 
                    $ip, 
                    $arp_mac,
                    $conf_mac)
             if ($arp_mac =~ /:/ or $conf_mac =~ /:/)
    }
  }
}

sub services_control
{
  my ($command) = $_[0];
  for my $service ('dhcp', 'bind', 'squid', 'lightsquid', 'shorewall')
  {
    if ($command eq 'restart')
    {
      printf("Restarting service %s\n", $service);
      for my $cmd (@{$config->{'restart'}{$service}})
      {
        printf("\tExecuting command %s\n", $cmd);
        system(sprintf("%s >> %s 2>&1", $cmd, $config->{'log'})) == 0 or die sprintf("Command [%s] filed, (%s)(%s)", $cmd, $?, $!);
      }
    }
    elsif ($command eq 'reconfigure')
    {
      printf("Reconfiguring %s\n", $service);
      system(sprintf("%s-generator", $service)) == 0 or die sprintf("Command [%s-generator] filed, (%s)(%s)", $service, $?, $!);
    }
  }
}

sub verify
{
  my $ok = 1;
  for my $host_name_1 (sort keys %{$hosts})
  {
    for my $host_name_2 (sort keys %{$hosts})
    {
      if ( $host_name_1 ne $host_name_2 )
      {
        for my $what ('ip', 'mac')
        {
          if($hosts->{$host_name_1}{$what} eq $hosts->{$host_name_2}{$what})
          {
            $ok = 0;
            printf("Equal %s adresses (%s) for hosts %s and %s\n", $what, $hosts->{$host_name_1}{$what}, $host_name_1, $host_name_2);
          }
        }
        for my $cname_1 (@{$hosts->{$host_name_1}{'cnames'}})
        {
          for my $cname_2 (@{$hosts->{$host_name_2}{'cnames'}})
          {
            if ( $cname_1 eq $cname_2 )
            {
              $ok = 0;
              printf("Equal cnames (%s) for hosts %s and %s\n", $cname_1, $host_name_1, $host_name_2);
            }
            if($cname_2 eq $host_name_1)
            {
              $ok = 0;
              printf("Equal cname of host %s and host name of host %s\n", $host_name_2,  $host_name_1);
            }
          }
          if($cname_1 eq $host_name_1)
          {
            $ok = 0;
            printf("Equal cname and host name for host %s\n", $host_name_1);
          }
        }
      }
    }
  }
  
  for my $filename (qw/shorewall squid/)
  {
    my $file = sprintf("/etc/configuration-generator/%s.conf", $filename);
    do $file; our ($hosts_config, $ranges_config);
    for my $host_name (sort keys %{$hosts_config})
    {
      if(not exists($hosts->{$host_name}))
      {
        $ok = 0;
        printf("Config %s contains unknown host '%s'\n", $file, $host_name);
      }
    }
    for my $range_name (sort keys %{$ranges_config})
    {
      if(not exists($ranges->{$range_name}))
      {
        $ok = 0;
        printf("Config %s contains unknown range '%s'\n", $file, $range_name);
      }
    }
  }
  
  printf("Verification %s\n", $ok ? 'done' : 'failed');
  return $ok;
}

sub util
{
  my $command = $ARGV[0] || 'show';
  if ($command eq 'show')
  {
    my $p1 = $ARGV[1] || 'hosts';
    if ($p1 eq 'hosts')
    {
      my $p2 = $ARGV[2] || 'status';
      if ($p2 eq 'online' or $p2 eq 'offline' or $p2 eq 'status')
      {
        show_hosts_status($p2);
      }
      elsif ($p2 eq 'names')
      {
        show_hosts_names();
      }
    }
    elsif ($p1 eq 'range')
    {
      my $range = $ARGV[2];
      my $p2 = $ARGV[3] || 'status';
      if ($p2 eq 'online' or $p2 eq 'offline' or $p2 eq 'status')
      {
        show_range_status($range, $p2);
      }
      elsif ($p2 eq 'mac')
      {
        show_range_mac($range);
      }
    }
  }
  elsif ($command eq 'services')
  {
    my $p1 = $ARGV[1] || 'restart';
    if ($p1 eq 'restart' or $p1 eq 'reconfigure')
    {
      services_control($p1) if verify();
    }
    elsif ($p1 eq 'refresh')
    {
      if (verify())
      {
        services_control('reconfigure');
        services_control('restart');
      }
    }
  }
  elsif ($command eq 'verify')
  {
    verify();
  }
  elsif ($command eq 'help')
  {
    print <<_
Hosts:
  Hosts online statuses:
    configuration-generator show hosts (status|online|offline)
  Hosts names:
    configuration-generator show hosts names

Ranges:
  Range hosts online status:
    configuration-generator show range rangename (status|online|offline)
  Range hosts macs
    configuration-generator show range rangename mac

Services control:
  Reconfiguration:
    configuration-generator services reconfigure
  Restart:
    configuration-generator services restart
  Reconfigure and restart
    configuration-generator services refresh
    
Verification:
  configuration-generator verify
_
  }
}

util();
