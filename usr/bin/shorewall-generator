#!/usr/bin/perl

use strict;
use utf8;

do '/etc/configuration-generator/shorewall.conf';

our ($config, $files, $accounting_interfaces, $external_interface);
my $services_path="../share/configuration-generator/shorewall/services/";

sub str_to_bash_variable_name
{
  my $inp = $_[0];
  $inp =~ s/-/_/g;
  return $inp;
}

sub put_label_to_file
{
  my ($fh, $label) = @_[0..1];
  print { $fh } sprintf ("\n###   %s   ###\n", $label);
}

sub shorewall_generate_params
{
  my $fh;
  open($fh, '>', $files->{'params'});
  
  print { $fh } sprintf("external_ip4_ADDR=\$(ifconfig %s | grep inet | sed -e 's/:/ /ig' | awk '{print \$3}')\n", $external_interface);
  
  foreach my $name (sort keys(%{$config}))
  {
    put_label_to_file($fh, $name);
    my $variable_name = str_to_bash_variable_name($name);
    if(exists($config->{$name}{'host'}))
    {
      print { $fh } sprintf("%s_ADDR=\$(resolveip -s %s)\n", $variable_name, $config->{$name}{'host'});
    }
    if(exists($config->{$name}{'range'}))
    {
      print { $fh } sprintf("%s_ADDR='%s'\n", $variable_name, $config->{$name}{'range'});
    }
  }
  close($fh);
}

# --- rules ---

sub build_services_rules
{
  my ($fh, $name, $variable_name) = @_[0..2];
  return unless exists $config->{$name}{'services'};
  foreach my $service (sort @{$config->{$name}{'services'}})
  {
    print { $fh } sprintf("SHELL %s/%s \\\$%s_ADDR \\\$external_ip4_ADDR\n", $files->{'services-dir'}, $service, $variable_name);
  }
}

sub build_ports_rules
{
  my ($fh, $name, $variable_name) = @_[0..2];
  return unless exists $config->{$name}{'ports'};
  foreach my $ptype (sort keys %{$config->{$name}{'ports'}})
  {
    foreach my $port (sort @{$config->{$name}{'ports'}{$ptype}})
    {
      my @pt;
      if ( $ptype eq 'both' ) { @pt = ('tcp', 'udp' ); } else { @pt = ($ptype); }
      foreach my $ptp (@pt)
      {
        print { $fh } sprintf("ACCEPT locl:\$%s_ADDR inet %s %s\n", $variable_name, $ptp, $port);
      }
    }
  }
}

sub build_dnat_rules
{
  my ($fh, $name, $variable_name) = @_[0..2];
  return unless exists $config->{$name}{'dnat'};
  foreach my $ptype (sort keys %{$config->{$name}{'dnat'}})
  {
    foreach my $port (sort @{$config->{$name}{'dnat'}{$ptype}})
    {
      my @pt;
      if ( $ptype eq 'both' ) { @pt = ('tcp', 'udp' ); } else { @pt = ($ptype); }
      foreach my $ptp (@pt)
      {
        print { $fh } sprintf("DNAT locl locl:\$%s_ADDR %s %s - \$external_ip4_ADDR\n", $variable_name, $ptp, $port);
        print { $fh } sprintf("DNAT inet locl:\$%s_ADDR %s %s\n", $variable_name, $ptp, $port);
      }
    }
  }
}

sub shorewall_generate_rules
{
  my $fh;
  open($fh, '>', $files->{'rules'});
  foreach my $name (sort keys(%{$config}))
  {
    put_label_to_file($fh, $name);
    my $variable_name = str_to_bash_variable_name($name);
    build_services_rules($fh, $name, $variable_name);
    build_ports_rules   ($fh, $name, $variable_name);
    build_dnat_rules    ($fh, $name, $variable_name);
  }
  close($fh);    
}

# --- ---

sub shorewall_generate_accounting
{
  my $fh;
  open($fh, '>', $files->{'accounting'});
  foreach my $name (sort keys(%{$config}))
  {
    put_label_to_file($fh, $name);
    my $variable_name = str_to_bash_variable_name($name);
    foreach my $interface (sort @{$accounting_interfaces})
    {
      print { $fh } sprintf("%s-%s-in-total:COUNT - %s \$%s_ADDR\nDONE %s-%s-in-total\n", $name, $interface, $interface, $variable_name, $name, $interface);
      print { $fh } sprintf("%s-%s-out-total:COUNT - \$%s_ADDR %s\nDONE %s-%s-out-total\n", $name, $interface, $variable_name, $interface, $name, $interface);
    }
  }
  close($fh);    
}

sub shorewall_generate
{
  #use Data::Dumper;
  #print Dumper($accounting_interfaces);
  #print Dumper($files);
  shorewall_generate_params();
  shorewall_generate_rules();
  shorewall_generate_accounting();
}

shorewall_generate();