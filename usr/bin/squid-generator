#!/usr/bin/perl

use lib "/usr/local/lib/configuration-generator";

use strict;
use warnings;
use utf8;
use ConfGenCommon;
#use Data::Dumper;

do '/etc/configuration-generator/hosts.conf'; our ($hosts, $ranges, $network, $external_interface);
do '/etc/configuration-generator/squid.conf'; our ($hosts_config, $ranges_config, $common_config, $paths, $templates);

$hosts_config = apply_template($hosts_config, $templates);
$ranges_config = apply_template($ranges_config, $templates);

my $acls = {'' => 0};

sub squid_label_to_name
{
  my $inp = join('_', @_);
  $inp =~ s/[- \.]/_/g;
  return 'o_'.$inp.'_o';
}

sub squid_build_rules_content
{
  my ($file_name, $rule_type, $content) = @_[0..2];
  #print Dumper $content;
  my $content_fh;
  open($content_fh, '>', $file_name);
  
  my $head = '';
  if    ($rule_type eq 'url'     )        { $head = 'https?://'; }
  elsif ($rule_type eq 'url_path')        { $head = ''; }
  elsif ($rule_type eq 'file_extentions') { $head = '.*\.'; }
  
  my $foot = '';
  if    ($rule_type eq 'url'     )        { $foot = '/.*$'; }
  elsif ($rule_type eq 'url_path')        { $foot = '$'; }
  elsif ($rule_type eq 'file_extentions') { $foot = '($|&.*)'; }
  
  for my $line (@{$content})
  {
    print { $content_fh } ($head.$line.$foot."\n");
  }
  close($content_fh);
}

sub build_src_rules
{
  my ($acl_fh) = $_[0];
  print { $acl_fh } "# --- Hosts --- \n";
  foreach my $host (sort keys(%{$hosts}))
  {
    print { $acl_fh } sprintf("acl %s src %s\n",
                           squid_acl_name($host),
                           $hosts->{$host}{'ip'});
  }
  print { $acl_fh } "# --- Ranges --- \n";
  foreach my $range (sort keys(%{$ranges}))
  {
    print { $acl_fh } sprintf("acl %s src %s\n",
                           squid_acl_name($range),
                           range_to_string($ranges->{$range},'-', ' ', ''));
  }
}

sub squid_acl_name
{
  my $name = $_[0];
  unless (exists($acls->{$name}))
  {
    $acls->{$name} = 'acl_'.$acls->{''};
    $acls->{''} += 1;
  }
  return $acls->{$name};
}

sub write_rule
{
  my ($acl_fh, $label, $rules, $class) = @_[0..3];
  
  print { $acl_fh } sprintf("\n# ------ Rules %s -> %s begin ------\n", $class, $label);
  
  my $host_acl_name = exists($hosts->{$label}) ? squid_acl_name($label) : '';
  
  for my $rule_type (qw/url url_path file_extentions/)
  {
    next if (not exists($rules->{$rule_type}));
    my $rule_keyword = $rule_type eq 'url' ? 'url_regex' : 'urlpath_regex';
    for my $access_type (qw/allow deny no_cache/)
    {
      next if (not exists($rules->{$rule_type}{$access_type}) or scalar(@{$rules->{$rule_type}{$access_type}}) == 0);
      my $name_of_rule = squid_acl_name(squid_label_to_name($label, $rule_type, $access_type));
      my $content_file_name = sprintf("%s/%s.%s.%s.%s", $paths->{'content_dir'}, $class, $label, $rule_type, $access_type);
      print { $acl_fh } sprintf("# --- %s # %s # %s ---\n", 
                                           $name_of_rule,
                                           $rule_type, 
                                           $access_type);
      print { $acl_fh } sprintf("acl %s %s -i \"%s\"\n", 
                                           $name_of_rule, 
                                           $rule_keyword,
                                           $content_file_name);
      print { $acl_fh } sprintf("%s %s %s %s\n", 
                                           $access_type eq 'no_cache' ? 'no_cache' : 'http_access', 
                                           $access_type eq 'no_cache' ? 'deny' : $access_type, 
                                           $host_acl_name,
                                           $name_of_rule);
      squid_build_rules_content($content_file_name, $rule_type, $rules->{$rule_type}{$access_type});
    }
  }
  
  for my $tor_type (qw/tor_url tor_url_path/)
  {
    next if (not exists($rules->{$tor_type}) or scalar(@{$rules->{$tor_type}} == 0));
    my $name_of_rule = squid_acl_name(squid_label_to_name($label, $tor_type));
    my $content_file_name = sprintf("%s/%s.%s.%s", $paths->{'content_dir'}, $class, $label, $tor_type);
    my $rule_keyword = $tor_type eq 'tor_url' ? 'url_regex' : 'urlpath_regex';
    print { $acl_fh } sprintf("# --- %s # %s ---\n", 
                                           $name_of_rule,
                                           $tor_type);
    print { $acl_fh } sprintf("acl %s %s -i \"%s\"\n", 
                                           $name_of_rule, 
                                           $rule_keyword,
                                           $content_file_name);
    
    print { $acl_fh } sprintf("never_direct allow %s %s\n", $host_acl_name, $name_of_rule);
    print { $acl_fh } sprintf("always_direct deny %s %s\n", $host_acl_name, $name_of_rule);
    squid_build_rules_content($content_file_name, $tor_type eq 'tor_url' ? 'url' : 'url_path', $rules->{$tor_type});
  }
  
  print { $acl_fh } sprintf("# ------ Rules %s -> %s end ------\n", $class, $label);
}

sub squid_generate
{
  my $acl_fh;
  open($acl_fh, '>', $paths->{'acl'});
  build_src_rules($acl_fh);
  foreach my $host (sort keys(%{$hosts}))
  {
    write_rule($acl_fh, $host, $hosts_config->{$host}, 'host') if exists ($hosts_config->{$host});
  }
  foreach my $range (sort keys(%{$ranges}))
  {
    write_rule($acl_fh, $range, $ranges_config->{$range}, 'range') if exists ($ranges_config->{$range});
  }
  write_rule($acl_fh, ".", $common_config, 'common');
  close($acl_fh);
}


squid_generate();
