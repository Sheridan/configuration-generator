#!/usr/bin/perl
use lib "/usr/local/lib/configuration-generator";

use strict;
use warnings;
use utf8;
use ConfGenCommon;


do '/etc/configuration-generator/hosts.conf';     our ($hosts, $ranges, $network, $external_interface);
do '/etc/configuration-generator/shorewall.conf'; our ($templates, $hosts_config, $ranges_config, $output_to, $accounting_interfaces);

$hosts_config = apply_template($hosts_config, $templates);
$ranges_config = apply_template($ranges_config, $templates);

my $services = {};

sub shorewall_generate_params
{
  my $fh;
  open($fh, '>', $output_to->{'params'});

  print { $fh } sprintf("external_ip4_ADDR=%s\n", $network->{'external_ip'});

  put_label_to_file($fh, 'Hosts');
  for my $host_name (sort keys(%{$hosts}))
  {
    if(exists($hosts_config->{$host_name}))
    {
	my $variable_name = str_to_bash_variable_name($host_name);
	print { $fh } sprintf("%s_HOST=%s\n", $variable_name, $hosts->{$host_name}{'ip'});
	
    }
  }
  put_label_to_file($fh, 'Ranges');
  for my $range_name (sort keys(%{$ranges}))
  {
    if (exists $ranges->{$range_name})
    {
	my $variable_name = str_to_bash_variable_name($range_name);
	print { $fh } sprintf("%s_RANGE=%s\n", $variable_name, range_to_string($ranges->{$range_name}, '-', ','));
    }
  }
  close($fh);
}

# --- rules ---

sub build_host_script_rules_rules
{
  my ($fh, $host_name, $variable_name) = @_[0..2];
  return unless exists $hosts_config->{$host_name}{'script-rules'};
  foreach my $script_rule (sort @{$hosts_config->{$host_name}{'script-rules'}})
  {
    my $cmd = sprintf("/usr/local/share/configuration-generator/shorewall/services/%s \\\$%s_HOST '%s'\n", $script_rule, $variable_name, $network->{'external_ip'});
    put_command_result_to_file($fh, sprintf("### script-rule %s ###", $script_rule), $cmd);
  }
}

sub build_host_services_rules
{
  my ($fh, $host_name, $variable_name) = @_[0..2];
  return unless exists $hosts_config->{$host_name}{'services'};
  for my $service (sort @{$hosts_config->{$host_name}{'services'}})
  {
    for my $ptype (sort keys %{$services->{$service}})
    {
      for my $port (sort @{$services->{$service}{$ptype}})
      {
        print { $fh } sprintf("ACCEPT locl:\$%s_HOST inet %s %s	### service %s ###\n", $variable_name, $ptype, $port, $service);
      }
    }
  }
}

sub build_host_ports_rules
{
  my ($fh, $host_name, $variable_name) = @_[0..2];
  return unless exists $hosts_config->{$host_name}{'ports'};
  for my $ptype (sort keys %{$hosts_config->{$host_name}{'ports'}})
  {
    for my $port (sort @{$hosts_config->{$host_name}{'ports'}{$ptype}})
    {
      my @pt;
      if ( $ptype eq 'both' ) { @pt = ('tcp', 'udp' ); } else { @pt = ($ptype); }
      for my $ptp (@pt)
      {
        print { $fh } sprintf("ACCEPT locl:\$%s_HOST inet %s %s	### port rule  ###\n", $variable_name, $ptp, $port);
      }
    }
  }
}

sub build_host_dnat_rules
{
  my ($fh, $host_name, $variable_name) = @_[0..2];
  return unless exists $hosts_config->{$host_name}{'dnat'};
  foreach my $ptype (sort keys %{$hosts_config->{$host_name}{'dnat'}})
  {
    foreach my $port (sort @{$hosts_config->{$host_name}{'dnat'}{$ptype}})
    {
      my @pt;
      if ( $ptype eq 'both' ) { @pt = ('tcp', 'udp' ); } else { @pt = ($ptype); }
      foreach my $ptp (@pt)
      {
        print { $fh } sprintf("DNAT locl locl:\$%s_HOST %s %s - \$external_ip4_ADDR	### dnat rule local ###\n", $variable_name, $ptp, $port);
        print { $fh } sprintf("DNAT inet locl:\$%s_HOST %s %s	### dnat rule remote ###\n", $variable_name, $ptp, $port);
      }
    }
  }
}

# ----------- ranges --------------------
sub build_range_services_rules
{
  my ($fh, $range_name, $variable_name) = @_[0..2];
  return unless exists $ranges_config->{$range_name}{'services'};
  for my $service (sort @{$ranges_config->{$range_name}{'services'}})
  {
    for my $ptype (sort keys %{$services->{$service}})
    {
      for my $port (sort @{$services->{$service}{$ptype}})
      {
        print { $fh } sprintf("ACCEPT locl:\$%s_HOST inet %s %s	### service %s ###\n", $variable_name, $ptype, $port, $service);
      }
    }
  }
}


sub build_range_script_rules_rules
{
  my ($fh, $range_name, $variable_name) = @_[0..2];
  return unless exists $ranges_config->{$range_name}{'script-rules'};
  foreach my $script_rule (sort @{$ranges_config->{$range_name}{'script-rules'}})
  {
    my $cmd = sprintf("/usr/local/share/configuration-generator/shorewall/services/%s '\$%s_RANGE' '%s'\n", $script_rule, $variable_name, $network->{'external_ip'});
    put_command_result_to_file($fh, sprintf("### script-rule %s ###", $script_rule), $cmd);
  }
}

sub build_range_ports_rules
{
  my ($fh, $range_name, $variable_name) = @_[0..2];
  return unless exists $ranges_config->{$range_name}{'ports'};
  foreach my $ptype (sort keys %{$ranges_config->{$range_name}{'ports'}})
  {
    foreach my $port (sort @{$ranges_config->{$range_name}{'ports'}{$ptype}})
    {
      my @pt;
      if ( $ptype eq 'both' ) { @pt = ('tcp', 'udp' ); } else { @pt = ($ptype); }
      foreach my $ptp (@pt)
      {
        print { $fh } sprintf("ACCEPT locl:\$%s_RANGE inet %s %s	### port rule ###\n", $variable_name, $ptp, $port);
      }
    }
  }
}


sub shorewall_generate_rules
{
  my $fh;
  open($fh, '>', $output_to->{'rules'});
  put_label_to_file($fh, 'Hosts');
  foreach my $host_name (sort keys(%{$hosts}))
  {
    if(exists($hosts_config->{$host_name}))
    {
	put_label_to_file($fh, $host_name);
	my $variable_name = str_to_bash_variable_name($host_name);
	build_host_script_rules_rules($fh, $host_name, $variable_name);
	build_host_services_rules    ($fh, $host_name, $variable_name);
	build_host_ports_rules       ($fh, $host_name, $variable_name);
	build_host_dnat_rules        ($fh, $host_name, $variable_name);
    }
  }
  put_label_to_file($fh, 'Ranges');
  for my $range_name (sort keys(%{$ranges}))
  {
    put_label_to_file($fh, $range_name);
    my $variable_name = str_to_bash_variable_name($range_name);
    build_range_script_rules_rules($fh, $range_name, $variable_name);
    build_range_services_rules    ($fh, $range_name, $variable_name);
    build_range_ports_rules       ($fh, $range_name, $variable_name);
  }
  close($fh);
}

# --- ---

sub shorewall_generate_accounting
{
  my $fh;
  open($fh, '>', $output_to->{'accounting'});
  put_label_to_file($fh, 'Hosts');
  foreach my $host_name (sort keys(%{$hosts_config}))
  {
    if(exists($hosts_config->{$host_name}))
    {
	put_label_to_file($fh, $host_name);
	my $variable_name = str_to_bash_variable_name($host_name);
	foreach my $interface (sort @{$accounting_interfaces})
	{
	    print { $fh } sprintf("%s-%s-in:COUNT - %s \$%s_HOST\nDONE %s-%s-in\n", $host_name, $interface, $interface, $variable_name, $host_name, $interface);
	    print { $fh } sprintf("%s-%s-out:COUNT - \$%s_HOST %s\nDONE %s-%s-out\n", $host_name, $interface, $variable_name, $interface, $host_name, $interface);
	}
    }
  }
  put_label_to_file($fh, 'Ranges');
  for my $range_name (sort keys(%{$ranges}))
  {
    if(exists($ranges_config->{$range_name}))
    {
	my $variable_name = str_to_bash_variable_name($range_name);
	put_label_to_file($fh, $range_name);
	foreach my $interface (sort @{$accounting_interfaces})
	{
	    print { $fh } sprintf("%s-%s-in:COUNT - %s \$%s_RANGE\nDONE %s-%s-in\n", $range_name, $interface, $interface, $variable_name, $range_name, $interface);
	    print { $fh } sprintf("%s-%s-out:COUNT - \$%s_RANGE %s\nDONE %s-%s-out\n", $range_name, $interface, $variable_name, $interface, $range_name, $interface);
	}
    }
  }
  close($fh);    
}

sub append_unconfigured_hosts
{
  foreach my $host_name (sort keys(%{$hosts}))
  {
    if(not exists($hosts_config->{$host_name}))
    {
      $hosts_config->{$host_name} = {};
    }
  }
}

sub load_services
{
  for my $line (`cat /etc/services | grep -v '#' | egrep '(tcp|udp)' | sort -u | awk '{ print \$1 "/" \$2}'`)
  {
    if($line =~ /.*\/.*\/.*/)
    {
      chomp $line;
      my ($service, $port, $proto) = split(/\//, $line);
      if (not exists($services->{$service}{$proto}))
      {
        $services->{$service}{$proto} = [];
      }
      push (@{$services->{$service}{$proto}}, $port);
    }
  }
}

sub shorewall_generate
{
  load_services();
  #use Data::Dumper;
  #print Dumper($services);
  #print Dumper($accounting_interfaces);
  #print Dumper($templates);
  #print Dumper($output_to);
  #print Dumper($hosts_config);
  #exit;
  append_unconfigured_hosts();
  shorewall_generate_params();
  shorewall_generate_rules();
  shorewall_generate_accounting();
}

shorewall_generate();
