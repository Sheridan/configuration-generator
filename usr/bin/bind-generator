#!/usr/bin/perl
use lib "/usr/local/lib/configuration-generator";

use strict;
use warnings;
use utf8;
use ConfGenCommon;

do '/etc/configuration-generator/hosts.conf'; our ($hosts, $ranges, $network, $external_interface);
do '/etc/configuration-generator/bind.conf';  our ($config, $output_to, $guests);

# -----------------------------  zone ----------------------------------
sub make_zone
{
    my ($fh, $serial) = @_[0..1];
    #print {$fh} "\$ORIGIN .\n";
    print {$fh} sprintf("\$ORIGIN %s.\n", $network->{'domain'});
    print {$fh} sprintf("\$TTL %d\n", $config->{'timers'}{'ttl'});
    print {$fh} sprintf("@ IN SOA %s.%s. %s.%s. (\n\t%d ; serial\n\t%s ; refresh\n\t%d ; rertry\n\t%d ; expire\n\t%d ; minimum\n)\n", 
			#$network->{'domain'},
			$config->{'in-soa'}{0}, $network->{'domain'},
			$config->{'in-soa'}{1}, $network->{'domain'},
			$serial,
			$config->{'timers'}{'refresh'},
			$config->{'timers'}{'retry'},
			$config->{'timers'}{'expire'},
			$config->{'timers'}{'minimum'});
    print {$fh} sprintf("@ IN NS %s.%s.\n", $network->{'dns'}, $network->{'domain'});
    print {$fh} sprintf("@ A %s\n", $network->{'router'});
}

sub make_zone_hosts
{
    my ($fh) = $_[0];
    #print {$fh} sprintf("\$ORIGIN %s.\n", $network->{'domain'});
    for my $host_name (sort keys %{$hosts})
    {
	print { $fh } sprintf("%s A %s\n", $host_name, $hosts->{$host_name}{'ip'});
	for my $cname (@{$hosts->{$host_name}{'cnames'}})
	{
	    print { $fh } sprintf("%s CNAME %s\n", $cname, $host_name);
	}
	if (exists($hosts->{$host_name}{'type'}))
	{
	    if ($hosts->{$host_name}{'type'} eq 'domain-controller')
	    {
		print { $fh } sprintf("_mscds NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
		print { $fh } sprintf("_sites NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
		print { $fh } sprintf("_tcp NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
		print { $fh } sprintf("_udp NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
		print { $fh } sprintf("DomainDNSZones NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
		print { $fh } sprintf("ForestDNSZones NS %s\n", $network->{'dns'}); #$hosts->{$host_name}{'ip'});
#		print { $fh } sprintf("%s. A %s\n", $network->{'domain'}, $hosts->{$host_name}{'ip'});
	    }
	    if ($hosts->{$host_name}{'type'} eq 'nameserver')
	    {
	      print { $fh } sprintf("%s A %s\n", $network->{'dns'}, $hosts->{$host_name}{'ip'});
	    }
	}
    }
}

# ----------------------------- reverse  zone ----------------------------------

sub make_reverse_zone
{
    my ($fh, $arpa_addr, $serial) = @_[0..2];
    
    print {$fh} "\$ORIGIN .\n";
    print {$fh} sprintf("\$TTL %d\n", $config->{'timers'}{'ttl'});
    print {$fh} sprintf("%s.in-addr.arpa IN SOA %s.%s. %s.%s. (\n\t%d ; serial\n\t%s ; refresh\n\t%d ; rertry\n\t%d ; expire\n\t%d ; minimum\n)\n", 
			$arpa_addr,
			$config->{'in-soa'}{0}, $network->{'domain'},
			$config->{'in-soa'}{1}, $network->{'domain'},
			$serial,
			$config->{'timers'}{'refresh'},
			$config->{'timers'}{'retry'},
			$config->{'timers'}{'expire'},
			$config->{'timers'}{'minimum'});
    print {$fh} sprintf("\tNS %s.%s.\n", $network->{'dns'}, $network->{'domain'});
}
#use Data::Dumper;
sub make_reverse_zone_hosts
{
    my ($fh, $arpa_addr, $subnet_octets_count) = @_[0..2];
    
    my $origins = {};
    #$subnet_octets_count = 1;
    for my $host_name (sort keys %{$hosts})
    {
	my @oct = split(/\./, $hosts->{$host_name}{'ip'});
	@oct = reverse(splice(@oct,$subnet_octets_count,4-$subnet_octets_count));
	push(@{$origins->{sprintf("%s.%s.in-addr.arpa.\n", join(".", @oct[1..scalar(@oct)-1]), $arpa_addr )}}, 
	    {
		'name' => $oct[0], 
		'host' => sprintf("%s.%s.", $host_name, $network->{'domain'})
	    });
	for my $cname (@{$hosts->{$host_name}{'cnames'}})
	{
	    push(@{$origins->{sprintf("%s.%s.in-addr.arpa.\n", join(".", @oct[1..scalar(@oct)-1]), $arpa_addr )}}, 
	    {
		'name' => $oct[0], 
		'host' => sprintf("%s.%s.", $cname, $network->{'domain'})
	    });
	}
	
    }
    #print Dumper($origins);
    for my $origin (sort keys %{$origins})
    {
	print {$fh} sprintf("\n\$ORIGIN %s\n", $origin);
	for my $origin_host (@{$origins->{$origin}})
	{
	    print {$fh} sprintf("%s PTR %s\n", $origin_host->{'name'}, $origin_host->{'host'});
	}
    }
}

# ----------------------------- zone description ----------------------------------

sub make_zones_descrition
{
    my ($zf, $rzf, $arpa_addr) = @_[0..2];
    my $fh;
    open($fh, '>', sprintf("%s/%s.zones.include", $output_to->{'zones'}, $network->{'domain'}));
    my $options = join("\n\t", @{$config->{'zones-options'}});
    print  {$fh} sprintf("zone \"%s\" in {\n\ttype master;\n\tfile \"%s\";\n\t%s\n};\n", $network->{'domain'}, $zf, $options);
    print  {$fh} sprintf("zone \"%s.in-addr.arpa\" in {\n\ttype master;\n\tfile \"%s\";\n\t%s\n};\n", $arpa_addr, $rzf, $options);
    close($fh);
}

# ----------------------------- guests ----------------------------------

sub make_guests
{
  my $fh = $_[0];
  for my $guests_range_name (@{$guests->{'ranges'}})
  {
    my $iplist = range_to_ip_list(@{$ranges->{$guests_range_name}});
    my $count = scalar(@{$iplist})+1;
    my $i = 0;
    for my $ip (@{$iplist})
    {
      print { $fh } sprintf("%s-%0${count}s A %s\n", $guests_range_name, $i, $ip);
      $i++;
    }
  }
}

sub make_zone_serial
{
    my $zf = $_[0];
    if(-e $zf)
    {
	my $serial =  `cat $zf | grep '; serial' | sed -e 's/[^0-9]//ig'`; chomp $serial;
	return $serial+1;
    }
    return 1;
}

sub bind_generate
{
  #use Data::Dumper;
  #print Dumper($config);
    my $fh;
    my $zf =  sprintf("%s/%s.zone", $output_to->{'zones'}, $network->{'domain'});
    my $serial = make_zone_serial($zf);
    open($fh, '>', $zf);
    make_zone($fh, $serial);
    make_zone_hosts($fh);
    close($fh);
    
    my @arpa = ();
    my @net  = reverse(split(/\./,$network->{'net'}));
    my @mask = split(/\./,$network->{'mask'}{'long'});
    for (my $i = 0; $i < 4; $i++)
    {
	push(@arpa, $net[$i]) if $mask[$i] eq "0";
    }
    my $arpa_addr = join('.', @arpa);
    my $rzf = sprintf("%s/%s.in-addr.arpa.zone", $output_to->{'zones'}, $arpa_addr);
    open($fh, '>', $rzf);
    make_reverse_zone($fh, $arpa_addr, $serial);
    make_reverse_zone_hosts($fh, $arpa_addr, 4-scalar(@arpa));
    close($fh);
    make_zones_descrition($zf, $rzf, $arpa_addr);
}

bind_generate();
